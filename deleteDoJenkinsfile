node {
    env.TF_LOG=1
    stage('Clean WS'){
        
        cleanWs()
    }
    stage('Pull Source Code') { 

       git branch: 'feature/manage_kubernetes', credentialsId: 'github-cred', url: 'git@github.com:dirtydriver/thesis-terraform.git'
       
    }
    stage('Terraform Init'){
                withCredentials([string(credentialsId: 'digitalocean-token', variable: 'TF_VAR_do_token'),[$class: 'UsernamePasswordMultiBinding', credentialsId:'nexus', usernameVariable: 'ARTIFACTORY_USERNAME ', passwordVariable: 'ARTIFACTORY_USERNAME ']])
 {
            docker.image('hashicorp/terraform:light').inside("""--entrypoint=''""") {
                
                sh'terraform init -auto-approve'
                
        }        }
        
    }
    stage('Terraform Refresh state'){
        withCredentials([string(credentialsId: 'digitalocean-token', variable: 'TF_VAR_do_token'),[$class: 'UsernamePasswordMultiBinding', credentialsId:'nexus', usernameVariable: 'ARTIFACTORY_USERNAME', passwordVariable: 'ARTIFACTORY_PASSWORD']]) {
            docker.image('hashicorp/terraform:light').inside("""--entrypoint=''""") {
                
                sh'terraform refresh'
                
        }        }
        
    }
    stage('Terraform Destroy Plan'){
       withCredentials([string(credentialsId: 'digitalocean-token', variable: 'TF_VAR_do_token'),[$class: 'UsernamePasswordMultiBinding', credentialsId:'nexus', usernameVariable: 'ARTIFACTORY_USERNAME', passwordVariable: 'ARTIFACTORY_PASSWORD']]) {
            docker.image('hashicorp/terraform:light').inside("""--entrypoint=''""") {
                
                sh'terraform plan -destroy -out=terraform.tfplan'
                
        }        }
    }
    stage('Terraform Apply Plan'){
        withCredentials([string(credentialsId: 'digitalocean-token', variable: 'TF_VAR_do_token'),[$class: 'UsernamePasswordMultiBinding', credentialsId:'nexus', usernameVariable: 'ARTIFACTORY_USERNAME', passwordVariable: 'ARTIFACTORY_PASSWORD']]) {
            docker.image('hashicorp/terraform:light').inside("""--entrypoint=''""") {
                
                sh'terraform apply -auto-approve terraform.tfplan '
                
        }        }
    }
    
    stage('Create & Upload kube config'){
        
         withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId:'nexus',
  usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']]){

                sh "curl --request DELETE -u $USERNAME:$PASSWORD https://nexus.thepetruska.com/repository/raw_files/kube_config/config "
                
        }
    stage('Commit Changes'){
     
      def commit_message= "Removed DigitalOcean Kubernetes Environment"
      print commit_message
      docker.image('dirtydriver/gitclient:0.1').inside("""--entrypoint=''""") {
                
        sh """ git add . && git commit -m \" $commit_message \" && git push --set-upstream origin feature/manage_kubernetes """ 
                
        }
      
     
   }                 
        
        
        
        
    
    }
}
